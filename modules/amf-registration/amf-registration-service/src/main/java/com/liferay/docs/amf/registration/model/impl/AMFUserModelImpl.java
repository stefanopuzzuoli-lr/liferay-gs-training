/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.docs.amf.registration.model.impl;

import com.liferay.docs.amf.registration.model.AMFUser;
import com.liferay.docs.amf.registration.model.AMFUserModel;
import com.liferay.docs.amf.registration.model.AMFUserSoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the AMFUser service. Represents a row in the &quot;AMFUR_AMFUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>AMFUserModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AMFUserImpl}.
 * </p>
 *
 * @author liferay
 * @see AMFUserImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AMFUserModelImpl
	extends BaseModelImpl<AMFUser> implements AMFUserModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a amf user model instance should use the <code>AMFUser</code> interface instead.
	 */
	public static final String TABLE_NAME = "AMFUR_AMFUser";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"userId", Types.BIGINT}, {"male", Types.BOOLEAN},
		{"dob", Types.TIMESTAMP}, {"homePhone", Types.VARCHAR},
		{"mobilePhone", Types.VARCHAR}, {"address", Types.VARCHAR},
		{"address2", Types.VARCHAR}, {"city", Types.VARCHAR},
		{"state_", Types.VARCHAR}, {"zip", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("male", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("dob", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("homePhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobilePhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AMFUR_AMFUser (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,userId LONG not null primary key,male BOOLEAN,dob DATE null,homePhone VARCHAR(75) null,mobilePhone VARCHAR(75) null,address VARCHAR(75) null,address2 VARCHAR(75) null,city VARCHAR(75) null,state_ VARCHAR(75) null,zip VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table AMFUR_AMFUser";

	public static final String ORDER_BY_JPQL =
		" ORDER BY amfUser.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AMFUR_AMFUser.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long ZIP_COLUMN_BITMASK = 2L;

	public static final long CREATEDATE_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AMFUser toModel(AMFUserSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AMFUser model = new AMFUserImpl();

		model.setMvccVersion(soapModel.getMvccVersion());
		model.setUuid(soapModel.getUuid());
		model.setUserId(soapModel.getUserId());
		model.setMale(soapModel.getMale());
		model.setDob(soapModel.getDob());
		model.setHomePhone(soapModel.getHomePhone());
		model.setMobilePhone(soapModel.getMobilePhone());
		model.setAddress(soapModel.getAddress());
		model.setAddress2(soapModel.getAddress2());
		model.setCity(soapModel.getCity());
		model.setState(soapModel.getState());
		model.setZip(soapModel.getZip());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AMFUser> toModels(AMFUserSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AMFUser> models = new ArrayList<AMFUser>(soapModels.length);

		for (AMFUserSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public AMFUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AMFUser.class;
	}

	@Override
	public String getModelClassName() {
		return AMFUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AMFUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AMFUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AMFUser, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((AMFUser)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AMFUser, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AMFUser, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AMFUser)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AMFUser, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AMFUser, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AMFUser>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AMFUser.class.getClassLoader(), AMFUser.class, ModelWrapper.class);

		try {
			Constructor<AMFUser> constructor =
				(Constructor<AMFUser>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<AMFUser, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AMFUser, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AMFUser, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<AMFUser, Object>>();
		Map<String, BiConsumer<AMFUser, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<AMFUser, ?>>();

		attributeGetterFunctions.put("mvccVersion", AMFUser::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion", (BiConsumer<AMFUser, Long>)AMFUser::setMvccVersion);
		attributeGetterFunctions.put("uuid", AMFUser::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<AMFUser, String>)AMFUser::setUuid);
		attributeGetterFunctions.put("userId", AMFUser::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<AMFUser, Long>)AMFUser::setUserId);
		attributeGetterFunctions.put("male", AMFUser::getMale);
		attributeSetterBiConsumers.put(
			"male", (BiConsumer<AMFUser, Boolean>)AMFUser::setMale);
		attributeGetterFunctions.put("dob", AMFUser::getDob);
		attributeSetterBiConsumers.put(
			"dob", (BiConsumer<AMFUser, Date>)AMFUser::setDob);
		attributeGetterFunctions.put("homePhone", AMFUser::getHomePhone);
		attributeSetterBiConsumers.put(
			"homePhone", (BiConsumer<AMFUser, String>)AMFUser::setHomePhone);
		attributeGetterFunctions.put("mobilePhone", AMFUser::getMobilePhone);
		attributeSetterBiConsumers.put(
			"mobilePhone",
			(BiConsumer<AMFUser, String>)AMFUser::setMobilePhone);
		attributeGetterFunctions.put("address", AMFUser::getAddress);
		attributeSetterBiConsumers.put(
			"address", (BiConsumer<AMFUser, String>)AMFUser::setAddress);
		attributeGetterFunctions.put("address2", AMFUser::getAddress2);
		attributeSetterBiConsumers.put(
			"address2", (BiConsumer<AMFUser, String>)AMFUser::setAddress2);
		attributeGetterFunctions.put("city", AMFUser::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<AMFUser, String>)AMFUser::setCity);
		attributeGetterFunctions.put("state", AMFUser::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<AMFUser, String>)AMFUser::setState);
		attributeGetterFunctions.put("zip", AMFUser::getZip);
		attributeSetterBiConsumers.put(
			"zip", (BiConsumer<AMFUser, String>)AMFUser::setZip);
		attributeGetterFunctions.put("createDate", AMFUser::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<AMFUser, Date>)AMFUser::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", AMFUser::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<AMFUser, Date>)AMFUser::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Boolean getMale() {
		return _male;
	}

	@Override
	public void setMale(Boolean male) {
		_male = male;
	}

	@JSON
	@Override
	public Date getDob() {
		return _dob;
	}

	@Override
	public void setDob(Date dob) {
		_dob = dob;
	}

	@JSON
	@Override
	public String getHomePhone() {
		if (_homePhone == null) {
			return "";
		}
		else {
			return _homePhone;
		}
	}

	@Override
	public void setHomePhone(String homePhone) {
		_homePhone = homePhone;
	}

	@JSON
	@Override
	public String getMobilePhone() {
		if (_mobilePhone == null) {
			return "";
		}
		else {
			return _mobilePhone;
		}
	}

	@Override
	public void setMobilePhone(String mobilePhone) {
		_mobilePhone = mobilePhone;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	@Override
	public String getAddress2() {
		if (_address2 == null) {
			return "";
		}
		else {
			return _address2;
		}
	}

	@Override
	public void setAddress2(String address2) {
		_address2 = address2;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@JSON
	@Override
	public String getZip() {
		if (_zip == null) {
			return "";
		}
		else {
			return _zip;
		}
	}

	@Override
	public void setZip(String zip) {
		_columnBitmask |= ZIP_COLUMN_BITMASK;

		if (_originalZip == null) {
			_originalZip = _zip;
		}

		_zip = zip;
	}

	public String getOriginalZip() {
		return GetterUtil.getString(_originalZip);
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, AMFUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AMFUser toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AMFUser>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AMFUserImpl amfUserImpl = new AMFUserImpl();

		amfUserImpl.setMvccVersion(getMvccVersion());
		amfUserImpl.setUuid(getUuid());
		amfUserImpl.setUserId(getUserId());
		amfUserImpl.setMale(getMale());
		amfUserImpl.setDob(getDob());
		amfUserImpl.setHomePhone(getHomePhone());
		amfUserImpl.setMobilePhone(getMobilePhone());
		amfUserImpl.setAddress(getAddress());
		amfUserImpl.setAddress2(getAddress2());
		amfUserImpl.setCity(getCity());
		amfUserImpl.setState(getState());
		amfUserImpl.setZip(getZip());
		amfUserImpl.setCreateDate(getCreateDate());
		amfUserImpl.setModifiedDate(getModifiedDate());

		amfUserImpl.resetOriginalValues();

		return amfUserImpl;
	}

	@Override
	public int compareTo(AMFUser amfUser) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), amfUser.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AMFUser)) {
			return false;
		}

		AMFUser amfUser = (AMFUser)obj;

		long primaryKey = amfUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		AMFUserModelImpl amfUserModelImpl = this;

		amfUserModelImpl._originalUuid = amfUserModelImpl._uuid;

		amfUserModelImpl._originalZip = amfUserModelImpl._zip;

		amfUserModelImpl._setModifiedDate = false;

		amfUserModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AMFUser> toCacheModel() {
		AMFUserCacheModel amfUserCacheModel = new AMFUserCacheModel();

		amfUserCacheModel.mvccVersion = getMvccVersion();

		amfUserCacheModel.uuid = getUuid();

		String uuid = amfUserCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			amfUserCacheModel.uuid = null;
		}

		amfUserCacheModel.userId = getUserId();

		amfUserCacheModel.male = getMale();

		Date dob = getDob();

		if (dob != null) {
			amfUserCacheModel.dob = dob.getTime();
		}
		else {
			amfUserCacheModel.dob = Long.MIN_VALUE;
		}

		amfUserCacheModel.homePhone = getHomePhone();

		String homePhone = amfUserCacheModel.homePhone;

		if ((homePhone != null) && (homePhone.length() == 0)) {
			amfUserCacheModel.homePhone = null;
		}

		amfUserCacheModel.mobilePhone = getMobilePhone();

		String mobilePhone = amfUserCacheModel.mobilePhone;

		if ((mobilePhone != null) && (mobilePhone.length() == 0)) {
			amfUserCacheModel.mobilePhone = null;
		}

		amfUserCacheModel.address = getAddress();

		String address = amfUserCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			amfUserCacheModel.address = null;
		}

		amfUserCacheModel.address2 = getAddress2();

		String address2 = amfUserCacheModel.address2;

		if ((address2 != null) && (address2.length() == 0)) {
			amfUserCacheModel.address2 = null;
		}

		amfUserCacheModel.city = getCity();

		String city = amfUserCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			amfUserCacheModel.city = null;
		}

		amfUserCacheModel.state = getState();

		String state = amfUserCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			amfUserCacheModel.state = null;
		}

		amfUserCacheModel.zip = getZip();

		String zip = amfUserCacheModel.zip;

		if ((zip != null) && (zip.length() == 0)) {
			amfUserCacheModel.zip = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			amfUserCacheModel.createDate = createDate.getTime();
		}
		else {
			amfUserCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			amfUserCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			amfUserCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return amfUserCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AMFUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AMFUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AMFUser, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((AMFUser)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AMFUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AMFUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AMFUser, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AMFUser)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AMFUser>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _mvccVersion;
	private String _uuid;
	private String _originalUuid;
	private long _userId;
	private Boolean _male;
	private Date _dob;
	private String _homePhone;
	private String _mobilePhone;
	private String _address;
	private String _address2;
	private String _city;
	private String _state;
	private String _zip;
	private String _originalZip;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private AMFUser _escapedModel;

}